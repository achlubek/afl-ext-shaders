#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 4, local_size_y = 32, local_size_z = 1) in;

#define SHADOW_MAP_COMPUTE_STAGE

#extension GL_OES_standard_derivatives : enable

#include rendererDataSet.glsl
#include sphereRaytracing.glsl
#include celestialDataStructs.glsl
#include proceduralValueNoise.glsl
#include wavesNoise.glsl
#include celestialShadowMapSet.glsl
#include polar.glsl
#include rotmat3d.glsl
#include textureBicubic.glsl
#include celestialCommons.glsl
#include camera.glsl

void main()
{/*
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    vec2 resolution = celestialBuffer.shadowmapresolution_offset_zero.xy;
    float widthOffset = celestialBuffer.shadowmapresolution_offset_zero.z;
    pixel.x += int(widthOffset);
    vec2 UV = vec2(pixel) / vec2(resolution);
    vec3 dir = polarToXyz(UV);
    RenderedCelestialBody body = getRenderedBody(celestialBuffer.celestialBody);



    // measure the level of shadow
    float maxHeight = body.atmosphereRadius;
    float minHeight = body.radius;
    float range = maxHeight - minHeight;
    float shadowheight = maxHeight;// - body.terrainMaxLevel;
    float shadowresult = maxHeight;// - body.terrainMaxLevel;
    float stepsize = range * 0.1;
    float iter = 0.0;
    vec3 directionToStar = -normalize(body.position - ClosestStarPosition);
    for(int i=0;i<10;i++){
        float probeheight = maxHeight - iter;
        Ray r = Ray(body.position + dir * probeheight, directionToStar);
        float raymarched = raymarchCelestialTerrainInternal(r, 0.0, heightMapImage, body, 0.00005);
        shadowheight = probeheight;
        if(raymarched > 0.0 && raymarched < DISTANCE_INFINITY){
            shadowresult = shadowheight;
            break;
        }
        iter += stepsize;
    }
    //shadowresult = imageLoad(shadowMapImage, pixel).r;
    //shadowheight = shadowresult;
    minHeight = shadowheight - stepsize;
    maxHeight = shadowheight + stepsize;
    range = maxHeight - minHeight;
    stepsize = range * 0.1;
    iter = 0.0;
    for(int i=0;i<10;i++){
        float probeheight = maxHeight - iter;
        Ray r = Ray(body.position + dir * probeheight, directionToStar);
        float raymarched = raymarchCelestialTerrainInternal(r, 0.0, heightMapImage, body, 0.00005);
        shadowheight = probeheight;
        if(raymarched > 0.0 && raymarched < DISTANCE_INFINITY){
            shadowresult = shadowheight;
            break;
        }
        iter += stepsize;
    }
    minHeight = shadowheight - stepsize;
    maxHeight = shadowheight + stepsize;
    range = maxHeight - minHeight;
    stepsize = range * 0.1;
    iter = 0.0;
    for(int i=0;i<10;i++){
        float probeheight = maxHeight - iter;
        Ray r = Ray(body.position + dir * probeheight, directionToStar);
        float raymarched = raymarchCelestialTerrainInternal(r, 0.0, heightMapImage, body, 0.00005);
        shadowheight = probeheight;
        if(raymarched > 0.0 && raymarched < DISTANCE_INFINITY){
            shadowresult = shadowheight;
            break;
        }
        iter += stepsize;
    }
//    shadowheight -= body.radius - body.atmosphereHeight;
    //shadowheight *= 20.0;


    float radius = body.atmosphereRadius;
    vec3 planeCenter = vec3(0.0, 0.0, radius);
    vec3 leftBottom = vec3(-radius, -radius, 0.0) + planeCenter;
    vec3 rightTop = vec3(radius, radius, 0.0) + planeCenter;
    vec3 planePoint = leftBottom + (rightTop - leftBottom) * vec3(UV, 0.0);
    vec3 direction = vec3(0.0, 0.0, -1.0);

    planePoint = inverse(body.fromHostToThisMatrix) * planePoint;
    direction = inverse(body.fromHostToThisMatrix) * direction;

    Ray ray = Ray(planePoint + body.position, direction);

    RenderPass pass = RenderPass(ray, body, 0.0, 0.0, 0.0, 0.0, 0.0, vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0), false, false, false, false);
    updatePassHits(pass);
    // we are all set now

    //imageStore(shadowMapImage, pixel, vec4(pass.surfaceHit, 0.0, 0.0, 0.0));

    float planetHit = pass.surfaceHit;

    if(pass.isSurfaceHit && pass.isWaterHit && pass.waterHit < pass.surfaceHit){
        planetHit = pass.waterHit + 0.09;
    }
    if(pass.isSurfaceHit && pass.isWaterHit && pass.waterHit > pass.surfaceHit){
        planetHit = pass.surfaceHit;
    }
    if(pass.isSurfaceHit && !pass.isWaterHit){
        planetHit = pass.surfaceHit;
    }
    if(!pass.isSurfaceHit && pass.isWaterHit){
        planetHit = pass.waterHit + 0.09;
    }
    //end

    float highClouds = celestialGetCloudsRaycast(pass.body, pass.atmosphereNearHitPos).r;
    float depth = planetHit / (radius * 2.0) ;
    imageStore(shadowMapImage, pixel, vec4(shadowresult - pass.body.radius, 1.0 - highClouds, 0.0, 0.0));
//    pass.atmosphereNearHitPos -= pass.body.position;
//    float dt = max(0.0, dot(normalize(pass.atmosphereNearHitPos), normalize(ClosestStarPosition - pass.body.position)));
//    imageStore(shadowMapImage, pixel, vec4(dt, dt, dt, 0.0));
*/
}
